package gui;

import de.fk.neuralnetwork.data.ImageContainer;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Felix
 */
public class MnistImportDialog extends javax.swing.JDialog {

    private int numImg = -1, numLbl = -1;
    private String imageFile = "", labelFile = "";
    
    /**
     * Creates new form MnistImportDialog
     * @param parent
     * @param modal
     */
    public MnistImportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        btnImageSet = new javax.swing.JButton();
        btnLabelSet = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        lblImageSet = new javax.swing.JLabel();
        lblLabelSet = new javax.swing.JLabel();
        spExamplesCount = new javax.swing.JSpinner();
        lblExamplesCount = new javax.swing.JLabel();
        lblFormat = new javax.swing.JLabel();
        cbFormat = new javax.swing.JComboBox<>();

        fileChooser.setCurrentDirectory(new java.io.File("D:\\Dokumente\\NetBeansProjects\\BeLL_NeuralNetwork"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aus MNIST importieren");

        btnImageSet.setText("Image Set auswählen");
        btnImageSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageSetActionPerformed(evt);
            }
        });

        btnLabelSet.setText("Label Set auswählen");
        btnLabelSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLabelSetActionPerformed(evt);
            }
        });

        btnImport.setText("Importieren");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        lblImageSet.setText("Kein Image Set ausgewählt");

        lblLabelSet.setText("Kein Label Set ausgewählt");

        spExamplesCount.setModel(new javax.swing.SpinnerNumberModel(60000, 1, 300000, 10));
        spExamplesCount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spExamplesCountStateChanged(evt);
            }
        });

        lblExamplesCount.setText("Beispiele importieren");

        lblFormat.setText("Format:");

        cbFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MNIST", "EMNIST" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnImport))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnImageSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLabelSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblImageSet)
                                    .addComponent(lblLabelSet)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblFormat)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbFormat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(spExamplesCount, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblExamplesCount))))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImageSet)
                    .addComponent(lblImageSet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLabelSet)
                    .addComponent(lblLabelSet))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spExamplesCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblExamplesCount))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFormat)
                    .addComponent(cbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImport)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImageSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if(file == null) return;
            imageFile = file.getAbsolutePath();
            try {
                numImg = ImageContainer.validateMnistImageFile(imageFile);
                if(numImg <= 0) {
                    lblImageSet.setText("Keine gültige MNIST Image-Datei.");
                    btnImport.setEnabled(false);
                } else {
                    lblImageSet.setText(numImg + " Datensätze");
                    spExamplesCount.setValue(numImg);
                    btnImport.setEnabled(Math.min(numImg, numLbl) >= (int) spExamplesCount.getValue());
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Es ist ein Fehler beim Öffnen der Datei aufgetreten.");
                Logger.getLogger(MnistImportDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnImageSetActionPerformed

    private void btnLabelSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLabelSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if(file == null) return;
            labelFile = file.getAbsolutePath();
            try {
                numLbl = ImageContainer.validateMnistLabelFile(labelFile);
                if(numLbl <= 0) {
                    lblLabelSet.setText("Keine gültige MNIST Label-Datei.");
                    btnImport.setEnabled(false);
                } else {
                    lblLabelSet.setText(numLbl + " Datensätze");
                    btnImport.setEnabled(Math.min(numImg, numLbl) >= (int) spExamplesCount.getValue());
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Es ist ein Fehler beim Öffnen der Datei aufgetreten.");
                Logger.getLogger(MnistImportDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnLabelSetActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        try {
            ImageContainer.readFromMnist(imageFile, labelFile, (int) spExamplesCount.getValue(), ImageContainer.FileFormat.values()[cbFormat.getSelectedIndex()]);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Es ist ein Fehler beim Einlesen der Dateien aufgetreten.");
            Logger.getLogger(MnistImportDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnImportActionPerformed

    private void spExamplesCountStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spExamplesCountStateChanged
        btnImport.setEnabled(Math.min(numImg, numLbl) >= (int) spExamplesCount.getValue());
    }//GEN-LAST:event_spExamplesCountStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImageSet;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnLabelSet;
    private javax.swing.JComboBox<String> cbFormat;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel lblExamplesCount;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblImageSet;
    private javax.swing.JLabel lblLabelSet;
    private javax.swing.JSpinner spExamplesCount;
    // End of variables declaration//GEN-END:variables
}
