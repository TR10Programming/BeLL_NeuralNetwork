package gui;

import de.fk.neuralnetwork.data.ImageContainer;
import de.fk.neuralnetwork.data.LabeledImage;
import de.fk.neuralnetwork.data.Tester;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Felix
 */
public class TrainingExamplesFrame extends javax.swing.JFrame {

    private MainFrame mfr;
    private ImageContainer.Set set = ImageContainer.Set.TRAINING;
    
    /**
     * Creates new form TrainingExamplesFrame
     * @param mfr
     */
    public TrainingExamplesFrame(MainFrame mfr) {
        this.mfr = mfr;
        initComponents();
    }
    
    public TrainingExampleDisplayPanel getDisplayPanel() {
        return (TrainingExampleDisplayPanel) displayPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        toolBar = new javax.swing.JToolBar();
        cbSet = new javax.swing.JComboBox<>();
        lblState = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        tfPosition = new javax.swing.JTextField();
        btnForward = new javax.swing.JButton();
        displayPanel = new TrainingExampleDisplayPanel();
        menuBar = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miImportMnist = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miReset = new javax.swing.JMenuItem();
        miClose = new javax.swing.JMenuItem();
        mnEdit = new javax.swing.JMenu();
        miShuffle = new javax.swing.JMenuItem();
        miTransformAll = new javax.swing.JMenuItem();
        miMoveData = new javax.swing.JMenuItem();
        mnView = new javax.swing.JMenu();
        miShowAll = new javax.swing.JMenuItem();
        miShowIncorrect = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new FileNameExtensionFilter("Set-Archiv", "sets"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Datenverwaltung");

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        cbSet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Training", "Validation", "Test" }));
        cbSet.setPreferredSize(new java.awt.Dimension(50, 20));
        cbSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSetActionPerformed(evt);
            }
        });
        toolBar.add(cbSet);

        lblState.setText("    0 Trainingsbeispiele geladen.    ");
        lblState.setPreferredSize(new java.awt.Dimension(200, 14));
        toolBar.add(lblState);

        btnBack.setText("<");
        btnBack.setFocusable(false);
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnBack);

        tfPosition.setText("0");
        tfPosition.setMaximumSize(new java.awt.Dimension(50, 2147483647));
        tfPosition.setPreferredSize(new java.awt.Dimension(30, 20));
        toolBar.add(tfPosition);

        btnForward.setText(">");
        btnForward.setFocusable(false);
        btnForward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnForward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnForward);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        mnFile.setText("Datei");

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Archiv öffnen");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        mnFile.add(miOpen);

        miImportMnist.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miImportMnist.setText("Aus MNIST importieren");
        miImportMnist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportMnistActionPerformed(evt);
            }
        });
        mnFile.add(miImportMnist);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Archiv speichern");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        mnFile.add(miSave);

        miReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        miReset.setText("Trainingsbeispiele zurücksetzen");
        miReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miResetActionPerformed(evt);
            }
        });
        mnFile.add(miReset);

        miClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        miClose.setText("Schließen");
        miClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseActionPerformed(evt);
            }
        });
        mnFile.add(miClose);

        menuBar.add(mnFile);

        mnEdit.setText("Bearbeiten");

        miShuffle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miShuffle.setText("Zufällig anordnen");
        miShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miShuffleActionPerformed(evt);
            }
        });
        mnEdit.add(miShuffle);

        miTransformAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miTransformAll.setText("Alle transformieren");
        miTransformAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTransformAllActionPerformed(evt);
            }
        });
        mnEdit.add(miTransformAll);

        miMoveData.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        miMoveData.setText("Verschieben...");
        miMoveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMoveDataActionPerformed(evt);
            }
        });
        mnEdit.add(miMoveData);

        menuBar.add(mnEdit);

        mnView.setText("Ansicht");

        miShowAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        miShowAll.setText("Alle anzeigen");
        miShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miShowAllActionPerformed(evt);
            }
        });
        mnView.add(miShowAll);

        miShowIncorrect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        miShowIncorrect.setText("Falsch Klassifizierte anzeigen");
        miShowIncorrect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miShowIncorrectActionPerformed(evt);
            }
        });
        mnView.add(miShowIncorrect);

        menuBar.add(mnView);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
            .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateImages() {
        lblState.setText("    " + ImageContainer.getImages(set).size() + " Trainingsbeispiele geladen.    ");
        displayPanel.repaint();
    }
    
    private void miImportMnistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportMnistActionPerformed
        new MnistImportDialog(this, true).setVisible(true);
        updateImages();
    }//GEN-LAST:event_miImportMnistActionPerformed

    private void miResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miResetActionPerformed
        ImageContainer.clearAll();
        updateImages();
    }//GEN-LAST:event_miResetActionPerformed

    private void miCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseActionPerformed
        dispose();
    }//GEN-LAST:event_miCloseActionPerformed

    private void miShowIncorrectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miShowIncorrectActionPerformed
        HashMap<LabeledImage, Double> imgs = Tester.findIncorrectlyClassified(mfr.getNet(), ImageContainer.getImages(set));
        getDisplayPanel().showCustomSet(new ArrayList<>(imgs.keySet()));
        updateImages();
    }//GEN-LAST:event_miShowIncorrectActionPerformed

    private void miShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miShowAllActionPerformed
        getDisplayPanel().showDefaultSet();
        updateImages();
    }//GEN-LAST:event_miShowAllActionPerformed

    private void miShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miShuffleActionPerformed
        ImageContainer.shuffleTrainingImages();
        cbSet.setSelectedIndex(0);
        set = ImageContainer.Set.TRAINING;
        getDisplayPanel().showDefaultSet();
        updateImages();
    }//GEN-LAST:event_miShuffleActionPerformed

    private void miTransformAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTransformAllActionPerformed
        ImageContainer.transformTrainingImages(new Random());
        getDisplayPanel().showDefaultSet();
        updateImages();
    }//GEN-LAST:event_miTransformAllActionPerformed

    private void cbSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSetActionPerformed
        set = ImageContainer.Set.values()[cbSet.getSelectedIndex()];
        getDisplayPanel().setSet(set);
        getDisplayPanel().showDefaultSet();
        updateImages();
    }//GEN-LAST:event_cbSetActionPerformed

    private void miMoveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miMoveDataActionPerformed
        new MoveDataDialog(this, true).setVisible(true);
        updateImages();
    }//GEN-LAST:event_miMoveDataActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        File f;
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION && (f = fileChooser.getSelectedFile()) != null) {
            String[] exts = f.getName().split("\\.");
            if(!exts[exts.length - 1].equalsIgnoreCase("sets")) f = new File(f.toString() + ".sets");
            try {
                ImageContainer.saveToArchive(f);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Beim Speichern in ein Archiv ist ein Problem aufgetreten: " + ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(TrainingExamplesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miSaveActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        File f;
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION && (f = fileChooser.getSelectedFile()) != null) {
            try {
                ImageContainer.readFromArchive(f);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Beim Öffnen des Archivs ist ein Problem aufgetreten: " + ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(TrainingExamplesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            updateImages();
        }
    }//GEN-LAST:event_miOpenActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnForward;
    private javax.swing.JComboBox<String> cbSet;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel lblState;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miClose;
    private javax.swing.JMenuItem miImportMnist;
    private javax.swing.JMenuItem miMoveData;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miReset;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miShowAll;
    private javax.swing.JMenuItem miShowIncorrect;
    private javax.swing.JMenuItem miShuffle;
    private javax.swing.JMenuItem miTransformAll;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenu mnView;
    private javax.swing.JTextField tfPosition;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
